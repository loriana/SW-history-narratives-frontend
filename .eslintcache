[{"/Users/lorianaporumb/Desktop/my-app/src/index.js":"1","/Users/lorianaporumb/Desktop/my-app/src/App.js":"2","/Users/lorianaporumb/Desktop/my-app/src/reportWebVitals.js":"3","/Users/lorianaporumb/Desktop/my-app/src/Diff.js":"4","/Users/lorianaporumb/Desktop/my-app/src/Tabset.js":"5"},{"size":500,"mtime":1612359178754,"results":"6","hashOfConfig":"7"},{"size":2895,"mtime":1612700566222,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1612358723624,"results":"9","hashOfConfig":"7"},{"size":3415,"mtime":1612697523239,"results":"10","hashOfConfig":"7"},{"size":2003,"mtime":1612697545277,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"kj7dd6",{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/lorianaporumb/Desktop/my-app/src/index.js",[],["24","25"],"/Users/lorianaporumb/Desktop/my-app/src/App.js",["26","27","28"],"/Users/lorianaporumb/Desktop/my-app/src/reportWebVitals.js",[],"/Users/lorianaporumb/Desktop/my-app/src/Diff.js",["29","30","31","32"],"import React, { PureComponent } from 'react';\nimport ReactDiffViewer, { DiffMethod } from 'react-diff-viewer';\n \nconst oldCode = `\nconst a = 10\nconst b = 10\nconst c = () => console.log('foo')\n \nif(a > 10) {\n  console.log('bar')\n}\n \nconsole.log('done')\n`;\nconst newCode = `const a = 10\nconst boo = 10\n \nif(a === 10) {\n  console.log('bar')\n}`;\n\n\n/*const oldCode = `// I had a little too much fun playing with composition here\n// that I created an ad-hoc DOM abstraction library\n// (It's certainly not perfect, but it provides many\n// helpers to construct and compose DOM elements)\nexport function list(listItems, ordered=false) {\n    const tag = ordered ? 'ol' : 'ul';\n    return container(listItems.map(text => textElement('li', text)), tag);\n}\n\nexport function setAttributes(element, attributes) {\n    for(let key in attributes) {\n        // deals with more deeply structured attributes (e.g., style)\n        if(typeof(attributes[key]) === 'object') {\n            setAttributes(element[key], attributes[key]);\n        } else {\n            element[key] = attributes[key];\n        }\n    }\n    return element;\n}\n\nexport function textElement(tag, text) {\n    const element = document.createElement(tag);\n    element.innerText = text;\n    return element;\n}\n\nexport function container(elements, tag='div') {\n    const container = document.createElement(tag);\n    for(let element of elements) {\n        container.appendChild(element);\n    }\n    return container;\n}`;\nconst newCode = `// I had a little too much fun playing with composition here\n// that I created an ad-hoc DOM abstraction library\n// (It's certainly not perfect, but it provides many\n// helpers to construct and compose DOM elements)\nexport function list(listItems, ordered=false) {\n    const tag = ordered ? 'ol' : 'ul';\n    return container(listItems.map(\n        el => typeof(el) === 'string' ?\n            textElement('li', el) :\n            container([el], 'li')), tag);\n}\n\nexport function setAttributes(element, attributes) {\n    for(let key in attributes) {\n        // deals with more deeply structured attributes (e.g., style)\n        if(typeof(attributes[key]) === 'object') {\n            setAttributes(element[key], attributes[key]);\n        } else {\n            element[key] = attributes[key];\n        }\n    }\n    return element;\n}\n\nexport function textElement(tag, text) {\n    const element = document.createElement(tag);\n    element.innerText = text;\n    return element;\n}\n\nexport function container(elements, tag='div') {\n    const container = document.createElement(tag);\n    for(let element of elements) {\n        container.appendChild(element);\n    }\n    return container;\n}`; */\n \nclass Diff extends PureComponent {\n    \n    highlightSyntax = (str) => {\n        if (!str) return;\n        return (\n          <pre\n            style={{ display: \"inline\" }}\n            dangerouslySetInnerHTML={{\n              __html: Prism.highlight(str, Prism.languages.javascript)\n            }}\n          />\n        );\n      };\n \n  render = () => {\n    let { oldCode } = this.props\n    let { newCode } = this.props\n    return (\n      <ReactDiffViewer\n        oldValue={oldCode}\n        newValue={newCode}\n        splitView={false}\n        renderContent={this.highlightSyntax}\n        useDarkTheme={false}\n        showDiffOnly={false}\n        disableWordDiff={true}\n        compareMethod={DiffMethod.SENTENCES}\n      />\n    );\n  };\n}\n\nexport default Diff;","/Users/lorianaporumb/Desktop/my-app/src/Tabset.js",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":3,"column":8,"nodeType":"39","messageId":"40","endLine":3,"endColumn":14},{"ruleId":"37","severity":1,"message":"41","line":5,"column":26,"nodeType":"39","messageId":"40","endLine":5,"endColumn":30},{"ruleId":"42","severity":1,"message":"43","line":81,"column":73,"nodeType":"39","messageId":"44","endLine":81,"endColumn":84},{"ruleId":"37","severity":1,"message":"45","line":4,"column":7,"nodeType":"39","messageId":"40","endLine":4,"endColumn":14},{"ruleId":"37","severity":1,"message":"46","line":15,"column":7,"nodeType":"39","messageId":"40","endLine":15,"endColumn":14},{"ruleId":"42","severity":1,"message":"47","line":103,"column":23,"nodeType":"39","messageId":"44","endLine":103,"endColumn":28},{"ruleId":"42","severity":1,"message":"47","line":103,"column":44,"nodeType":"39","messageId":"44","endLine":103,"endColumn":49},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'Tabset' is defined but never used.","Identifier","unusedVar","'Hunk' is defined but never used.","no-undef","'renderToken' is not defined.","undef","'oldCode' is assigned a value but never used.","'newCode' is assigned a value but never used.","'Prism' is not defined.","no-global-assign","no-unsafe-negation"]