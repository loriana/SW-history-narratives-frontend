[{"/Users/lorianaporumb/Desktop/my-app/src/index.js":"1","/Users/lorianaporumb/Desktop/my-app/src/App.js":"2","/Users/lorianaporumb/Desktop/my-app/src/reportWebVitals.js":"3","/Users/lorianaporumb/Desktop/my-app/src/Diff.js":"4","/Users/lorianaporumb/Desktop/my-app/src/Tabset.js":"5","/Users/lorianaporumb/Desktop/my-app/src/ArcComponent.js":"6","/Users/lorianaporumb/Desktop/my-app/src/TextDisplay.js":"7","/Users/lorianaporumb/Desktop/my-app/src/MessageComponent.js":"8"},{"size":500,"mtime":1612359178754,"results":"9","hashOfConfig":"10"},{"size":6673,"mtime":1614430267415,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1612358723624,"results":"12","hashOfConfig":"10"},{"size":3415,"mtime":1612697523239,"results":"13","hashOfConfig":"10"},{"size":2474,"mtime":1613843978111,"results":"14","hashOfConfig":"10"},{"size":1738,"mtime":1614429849997,"results":"15","hashOfConfig":"10"},{"size":649,"mtime":1614180854098,"results":"16","hashOfConfig":"10"},{"size":1959,"mtime":1614444648454,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"kj7dd6",{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/lorianaporumb/Desktop/my-app/src/index.js",[],["39","40"],"/Users/lorianaporumb/Desktop/my-app/src/App.js",["41","42","43"],"import React, { Component } from 'react';\nimport './App.css';\nimport Tabset from './Tabset';\nimport ArcComponent from './ArcComponent';\nimport MessageComponent from './MessageComponent';\n\n\n\nimport { parseDiff, Diff, Hunk, tokenize } from 'react-diff-view';\nimport 'react-diff-view/style/index.css';\n\n\nimport axios from 'axios';\n\n//add pretty progress bar: https://reactjsexample.com/a-library-to-create-stunning-progress-bars-and-steps-in-react/\n//or this one with a label: https://www.npmjs.com/package/@ramonak/react-progress-bar\n//also check out this one: https://bit.dev/nexxtway/react-rainbow/progress-step\n\nclass App extends Component {\n\n  state = {\n    first_sha: null,\n    type: null,\n    next_sha: null,\n    current_sha: null,\n    prev_sha: null,\n    message: null,\n    current_arc: null,\n    files: [], \n    theory: [],\n  }\n\n\n\n  render() {\n  \n    if (this.state.type === \"arc\") {\n\n      return (\n        <div className=\"App\">\n          <ArcComponent \n          title={this.state.message} \n          description={this.state.files} \n          next={this.handleNext} previous={this.handleBack}\n          disableNext={this.state.next_sha === this.state.current_sha}\n          disablePrevious={this.state.prev_sha === null}\n          ></ArcComponent>\n        </div>\n      )\n\n    }\n\n//<OnClickProgressIndicator></OnClickProgressIndicator>\n//<ArcDropdown></ArcDropdown>\n    return (\n      <div className=\"App\">\n        <MessageComponent\n        arc = {this.state.current_arc}\n        message={this.state.message}\n        next={this.handleNext} disableNext={this.state.next_sha === this.state.current_sha}\n        previous={this.handleBack} disablePrevious={this.state.prev_sha === null}\n        theory={this.handleTheory} disableTheory={this.state.theory.length === 0}>\n        </MessageComponent>\n        {\n          this.state.files.length > 0 ?\n            <Tabset key={this.state.current_sha} files={remove_theory(this.state.theory, this.state.files)}></Tabset>\n            :\n            null\n        }\n      </div>\n    );\n\n  }\n\n\n\n\n\n  //is there a theory resource?\n  //  if no theory resource, grey out the theory button\n  componentDidMount() {\n\n    this.get_first_commit_data()\n    \n  }\n\n  handleNext = () => {\n    console.log(\"HANDLE NEXT\")\n    console.log(`Requesting sha: ${this.state.next_sha}`)\n    console.log(`Current sha: ${this.state.current_sha}`)\n    \n    this.get_commit_data(this.state.next_sha)\n  }\n\n  handleBack = () => {\n    console.log(\"Handle prev\")\n    console.log(`Requesting sha: ${this.state.prev_sha}`)\n    if (this.state.prev_sha === this.state.first_sha) {\n\n      this.get_first_commit_data()\n\n    } else {\n     \n      this.get_commit_data(this.state.prev_sha)\n    }\n    \n\n      console.log(\"after api call\")\n      console.log(this.state)\n  }\n\n  handleTheory = () => {\n\n    axios.get(`http://localhost:3030/commits/theory/${this.state.current_sha}`)\n      .then(response => {\n        console.log(response)\n        \n        display_theory(response.data)\n\n      })\n      .catch(error => {\n        console.log(error)\n      })\n    \n  }\n\n\n  get_commit_data(sha) {\n    axios.get(`http://localhost:3030/commits/${sha}`)\n      .then(response => {\n       // console.log(response)\n        this.setState({\n          first_sha: this.state.first_sha,\n          type: response.data.type,\n          next_sha: response.data.next_sha,\n          current_sha: response.data.current_sha,\n          prev_sha: this.state.current_sha,\n          message: response.data.message,\n          current_arc: response.data.type === \"arc\"? response.data.message : this.state.current_arc,\n          files: response.data.type === \"normal\" ? parseDiff(response.data.files) : response.data.files, \n          theory: response.data.theory\n        })\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n\n  get_first_commit_data() {\n    axios.get('http://localhost:3030/commits')\n      .then(response => {\n        console.log(\"IN COMPONENT DID MOUNT\")\n        console.log(response.data)\n        this.setState({\n          first_sha: response.data.current_sha,\n          type:  response.data.type,\n          next_sha: response.data.next_sha,\n          current_sha: response.data.current_sha,\n          prev_sha: null,\n          message: response.data.message,\n          current_arc: response.data.type === \"arc\"? response.data.message : this.state.current_arc,\n          files: response.data.type === \"normal\" ? parseDiff(response.data.files) : response.data.files, \n          theory: response.data.theory\n        })\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n\n}\n\n\n\n\n\n\n\n\n\n\nfunction convert_to_base64(img_data, type) {\n  let img = Buffer.from(img_data, 'binary').toString('base64')\n  return `data:${type};base64,${img}`;\n}\n\n\n\nfunction create_blob_url(img_data, contentType) {\n  const base64ImageData = convert_to_base64(img_data, contentType);\n\nconst byteCharacters = atob(base64ImageData.substr(`data:${contentType};base64,`.length));\nconst byteArrays = [];\n\nfor (let offset = 0; offset < byteCharacters.length; offset += 1024) {\n    const slice = byteCharacters.slice(offset, offset + 1024);\n\n    const byteNumbers = new Array(slice.length);\n    for (let i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n    }\n\n    const byteArray = new Uint8Array(byteNumbers);\n\n    byteArrays.push(byteArray);\n}\nconst blob = new Blob(byteArrays, {type: contentType});\nconst blobUrl = URL.createObjectURL(blob);\n\nreturn blobUrl;\n}\n\n\nfunction display_theory(theory_array) {\n  console.log(\"THEORY ARRAY\")\n  console.log(theory_array)\n\n  for (let theory_piece of theory_array) {\n    if (theory_piece.type.startsWith(\"URL\")) {\n      window.open(theory_piece.file, \"_blank\")\n\n    } else if (theory_piece.type.startsWith(\"text/\") || theory_piece.type.startsWith(\"image/\")) {\n      const blobUrl = create_blob_url(theory_piece.file, theory_piece.type);\n      window.open(blobUrl, \"_blank\")\n    }\n  }\n\n}\n\nfunction remove_theory(theory_array, files) {\n\n  let filtered_files = []\n  for (let file of files) {\n    if (!is_theory(file, theory_array)) {\n      filtered_files.push(file)\n    }\n  }\n\n  return filtered_files\n}\n\n\n/**\n * Returns true if:\n * the given file *doesn't* have a newPath prop (since binaries like images don't),\n * OR it is part of the array of theory paths,\n * OR if it is a file commited as part of an arc commit\n * @param {*} file \n * @param {*} theory_array \n */\nfunction is_theory(file, theory_array) {\n  if (file.newPath === null || file.newPath === undefined) {\n    return true\n  }\n\n  return theory_array.includes(file.newPath) ||\n    file.newPath.toLowerCase().startsWith(\"arc\")\n}\n\n\n\nexport default App;\n","/Users/lorianaporumb/Desktop/my-app/src/reportWebVitals.js",[],"/Users/lorianaporumb/Desktop/my-app/src/Diff.js",["44","45","46","47"],"import React, { PureComponent } from 'react';\nimport ReactDiffViewer, { DiffMethod } from 'react-diff-viewer';\n \nconst oldCode = `\nconst a = 10\nconst b = 10\nconst c = () => console.log('foo')\n \nif(a > 10) {\n  console.log('bar')\n}\n \nconsole.log('done')\n`;\nconst newCode = `const a = 10\nconst boo = 10\n \nif(a === 10) {\n  console.log('bar')\n}`;\n\n\n/*const oldCode = `// I had a little too much fun playing with composition here\n// that I created an ad-hoc DOM abstraction library\n// (It's certainly not perfect, but it provides many\n// helpers to construct and compose DOM elements)\nexport function list(listItems, ordered=false) {\n    const tag = ordered ? 'ol' : 'ul';\n    return container(listItems.map(text => textElement('li', text)), tag);\n}\n\nexport function setAttributes(element, attributes) {\n    for(let key in attributes) {\n        // deals with more deeply structured attributes (e.g., style)\n        if(typeof(attributes[key]) === 'object') {\n            setAttributes(element[key], attributes[key]);\n        } else {\n            element[key] = attributes[key];\n        }\n    }\n    return element;\n}\n\nexport function textElement(tag, text) {\n    const element = document.createElement(tag);\n    element.innerText = text;\n    return element;\n}\n\nexport function container(elements, tag='div') {\n    const container = document.createElement(tag);\n    for(let element of elements) {\n        container.appendChild(element);\n    }\n    return container;\n}`;\nconst newCode = `// I had a little too much fun playing with composition here\n// that I created an ad-hoc DOM abstraction library\n// (It's certainly not perfect, but it provides many\n// helpers to construct and compose DOM elements)\nexport function list(listItems, ordered=false) {\n    const tag = ordered ? 'ol' : 'ul';\n    return container(listItems.map(\n        el => typeof(el) === 'string' ?\n            textElement('li', el) :\n            container([el], 'li')), tag);\n}\n\nexport function setAttributes(element, attributes) {\n    for(let key in attributes) {\n        // deals with more deeply structured attributes (e.g., style)\n        if(typeof(attributes[key]) === 'object') {\n            setAttributes(element[key], attributes[key]);\n        } else {\n            element[key] = attributes[key];\n        }\n    }\n    return element;\n}\n\nexport function textElement(tag, text) {\n    const element = document.createElement(tag);\n    element.innerText = text;\n    return element;\n}\n\nexport function container(elements, tag='div') {\n    const container = document.createElement(tag);\n    for(let element of elements) {\n        container.appendChild(element);\n    }\n    return container;\n}`; */\n \nclass Diff extends PureComponent {\n    \n    highlightSyntax = (str) => {\n        if (!str) return;\n        return (\n          <pre\n            style={{ display: \"inline\" }}\n            dangerouslySetInnerHTML={{\n              __html: Prism.highlight(str, Prism.languages.javascript)\n            }}\n          />\n        );\n      };\n \n  render = () => {\n    let { oldCode } = this.props\n    let { newCode } = this.props\n    return (\n      <ReactDiffViewer\n        oldValue={oldCode}\n        newValue={newCode}\n        splitView={false}\n        renderContent={this.highlightSyntax}\n        useDarkTheme={false}\n        showDiffOnly={false}\n        disableWordDiff={true}\n        compareMethod={DiffMethod.SENTENCES}\n      />\n    );\n  };\n}\n\nexport default Diff;",["48","49"],"/Users/lorianaporumb/Desktop/my-app/src/Tabset.js",["50","51","52"],"import React, { Component } from 'react';\n\nimport { Tabs, Tab } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { parseDiff, Diff, Hunk, tokenize } from 'react-diff-view';\nimport 'react-diff-view/style/index.css';\nimport refractor from 'refractor';\n\n\n\nclass Tabset extends Component {\n\n  renderToken = (token, defaultRender, i) => {\n    switch (token.type) {\n      case 'space':\n        console.log(token);\n        return (\n          <span key={i} className=\"space\">\n            {token.children && token.children.map((token, i) => renderToken(token, defaultRender, i))}\n          </span>\n        );\n      default:\n        return defaultRender(token, i);\n    }\n  };\n\n  customize_options(file) {\n    let file_path = file.newPath.split('.')\n    let extension = file_path[file_path.length - 1]\n\n    let options = {\n      highlight: true,\n      refractor: refractor,\n      language: extension\n    }\n    return options\n  }\n\n\n  filter_files(files) {\n    let filtered_files = []\n    for (let file of files) {\n      let check = is_supported_extension(file.hunks, this.customize_options(file))\n      if (check.supported) {\n        filtered_files.push({\n          file: file,\n          check: check\n        })\n      }\n    }\n    return filtered_files\n  }\n\n\n  render() {\n    let { files } = this.props\n    let filtered_files = this.filter_files(files)\n\n    return (\n\n      <Tabs defaultActiveKey={filtered_files[0].file.newPath}>\n        {\n          filtered_files.map(item => {\n\n            let file = item.file\n            let check = item.check\n\n            if (check.supported) {\n\n              return (\n                <Tab key={file.newPath} eventKey={file.newPath} title={file.newPath}>\n              <div key={file.newPath} className=\"tab-item-wrapper\">\n                <Diff\n                  key={file.oldRevision + '-' + file.newRevision}\n                  viewType=\"unified\" diffType={file.type}\n                  hunks={file.hunks}\n                  tokens={check.tokens}></Diff>\n              </div>\n            </Tab>\n\n              );\n            }\n            return null;\n          })\n        }\n      </Tabs>\n    );\n  }\n}\n\n\nfunction is_supported_extension(hunks, options) {\n  let supported = true;\n  let tokens;\n  try {\n    tokens = tokenize(hunks, options)\n  } catch (error) {\n    supported = false;\n    tokens = null;\n    console.log(error);\n  }\n  return {\n    supported: supported,\n    tokens: tokens,\n  };\n}\n\nexport default Tabset;\n\n\n","/Users/lorianaporumb/Desktop/my-app/src/ArcComponent.js",[],"/Users/lorianaporumb/Desktop/my-app/src/TextDisplay.js",[],"/Users/lorianaporumb/Desktop/my-app/src/MessageComponent.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":9,"column":21,"nodeType":"59","messageId":"60","endLine":9,"endColumn":25},{"ruleId":"57","severity":1,"message":"61","line":9,"column":27,"nodeType":"59","messageId":"60","endLine":9,"endColumn":31},{"ruleId":"57","severity":1,"message":"62","line":9,"column":33,"nodeType":"59","messageId":"60","endLine":9,"endColumn":41},{"ruleId":"57","severity":1,"message":"63","line":4,"column":7,"nodeType":"59","messageId":"60","endLine":4,"endColumn":14},{"ruleId":"57","severity":1,"message":"64","line":15,"column":7,"nodeType":"59","messageId":"60","endLine":15,"endColumn":14},{"ruleId":"65","severity":1,"message":"66","line":103,"column":23,"nodeType":"59","messageId":"67","endLine":103,"endColumn":28},{"ruleId":"65","severity":1,"message":"66","line":103,"column":44,"nodeType":"59","messageId":"67","endLine":103,"endColumn":49},{"ruleId":"53","replacedBy":"68"},{"ruleId":"55","replacedBy":"69"},{"ruleId":"57","severity":1,"message":"70","line":6,"column":10,"nodeType":"59","messageId":"60","endLine":6,"endColumn":19},{"ruleId":"57","severity":1,"message":"61","line":6,"column":27,"nodeType":"59","messageId":"60","endLine":6,"endColumn":31},{"ruleId":"65","severity":1,"message":"71","line":20,"column":65,"nodeType":"59","messageId":"67","endLine":20,"endColumn":76},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-unused-vars","'Diff' is defined but never used.","Identifier","unusedVar","'Hunk' is defined but never used.","'tokenize' is defined but never used.","'oldCode' is assigned a value but never used.","'newCode' is assigned a value but never used.","no-undef","'Prism' is not defined.","undef",["72"],["73"],"'parseDiff' is defined but never used.","'renderToken' is not defined.","no-global-assign","no-unsafe-negation"]